"use strict";

var _core = require("@dogmalang/core");

const path = _core.dogma.use(require("@dogmalang/path"));

const fs = _core.dogma.use(require("fs"));

const fsx = _core.dogma.use(require("fs-extra"));

const Entry = _core.dogma.use(require("./Entry"));

const $File = class File extends Entry {
  constructor() {
    super(...arguments);
    {}
  }

};
const File = new Proxy($File, {
  apply(receiver, self, args) {
    return new $File(...args);
  }

});
module.exports = exports = File;

File.prototype.exists = function () {
  try {
    return fs.statSync(this.path).isFile();
  } catch (_) {
    return false;
  }
};

File.prototype.len = File.prototype.size = function () {
  let s = 0;
  {
    const stat = fs.statSync(this.path);

    if (stat.isFile()) {
      s = stat.size;
    } else {
      _core.dogma.raise("file not found: %s.", this.path);
    }
  }
  return s;
};

File.prototype.ensure = function () {
  {
    fsx.ensureFileSync(this.path);
  }
};

File.prototype.c = File.prototype.read = function (opts) {
  /* istanbul ignore next */
  _core.dogma.paramExpectedToBe("opts", opts, [_core.text, _core.map]);

  {
    /*istanbul ignore else*/
    if (_core.dogma.is(opts, _core.text)) {
      opts = {
        ["encoding"]: opts
      };
    } else if (opts == null) {
      opts = {};
    }

    opts.encoding = (0, _core.coalesce)(opts.encoding, "utf8");

    if (opts.encoding == "utf-8") {
      opts.encoding = "utf8";
    }

    return fs.readFileSync(this.path, opts);
  }
};

File.prototype.write = function (c, opts) {
  /* istanbul ignore next */
  _core.dogma.paramExpected("c", c, null);
  /* istanbul ignore next */


  _core.dogma.paramExpectedToBe("opts", opts, [_core.text, _core.map]);

  {
    /*istanbul ignore else*/
    if (_core.dogma.is(opts, _core.text)) {
      opts = {
        ["encoding"]: opts
      };
    } else if (opts == null) {
      opts = {};
    }

    opts.encoding = (0, _core.coalesce)(opts.encoding, "utf8");

    if (opts.encoding == "utf-8") {
      opts.encoding = "utf8";
    }

    fs.writeFileSync(this.path, c, opts);
  }
};

File.prototype.append = File.prototype.add = function (c, opts) {
  /* istanbul ignore next */
  _core.dogma.paramExpected("c", c, null);
  /* istanbul ignore next */


  _core.dogma.paramExpectedToBe("opts", opts, [_core.text, _core.map]);

  {
    /*istanbul ignore else*/
    if (_core.dogma.is(opts, _core.text)) {
      opts = {
        ["encoding"]: opts
      };
    } else if (opts == null) {
      opts = {};
    }

    opts.encoding = (0, _core.coalesce)(opts.encoding, "utf8");

    if (opts.encoding == "utf-8") {
      opts.encoding = "utf8";
    }

    fs.appendFileSync(this.path, c, opts);
  }
};

File.prototype.moveTo = function (...args) {
  {
    if (this.exists()) {
      fsx.moveSync(this.path, path.join(...args), {
        ["overwrite"]: true
      });
    } else {
      _core.dogma.raise("file not existing: %s.", this.path);
    }
  }
};