"use strict";

var _core = require("@dogmalang/core");

const path = _core.dogma.use(require("@dogmalang/path"));

const fs = _core.dogma.use(require("fs"));

const fsx = _core.dogma.use(require("fs-extra"));

const Entry = _core.dogma.use(require("./Entry"));

const $Dir = class Dir extends Entry {
  constructor() {
    super(...arguments);
    {}
  }

};
const Dir = new Proxy($Dir, {
  apply(receiver, self, args) {
    return new $Dir(...args);
  }

});
module.exports = exports = Dir;

Dir.prototype.exists = function () {
  try {
    return fs.statSync(this.path).isDirectory();
  } catch (_) {
    return false;
  }
};

Dir.prototype.ensure = function () {
  {
    fsx.ensureDirSync(this.path);
  }
};

Dir.prototype.read = function (opts = {}) {
  let entries = [];
  /* istanbul ignore next */

  _core.dogma.paramExpectedToBe("opts", opts, _core.map);

  {
    entries = fs.readdirSync(this.path);

    if (opts.name == "full") {
      for (let i = 0; i < (0, _core.len)(entries); i += 1) {
        _core.dogma.setItem("=", entries, i, path.join(this.path, _core.dogma.getItem(entries, i)));
      }
    }
  }
  return entries;
};

Dir.prototype.moveTo = function (...args) {
  {
    if (this.exists()) {
      fsx.moveSync(this.path, path.join(...args), {});
    } else {
      _core.dogma.raise("dir not existing: %s.", this.path);
    }
  }
};

Dir.prototype.file = function (...args) {
  {
    return _core.dogma.use(require("./File"))(path.join(this.path, ...args));
  }
};

Dir.prototype.dir = function (...args) {
  {
    return Dir(path.join(this.path, ...args));
  }
};